# Debug Dockerfile for Smart Trading Bot
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies with verbose output
RUN echo "=== Installing system dependencies ===" && \
    apt-get update -y && \
    echo "=== Installing gcc and g++ ===" && \
    apt-get install -y gcc g++ && \
    echo "=== Cleaning up apt cache ===" && \
    rm -rf /var/lib/apt/lists/* && \
    echo "=== System dependencies installed ==="

# Create virtual environment
RUN echo "=== Creating virtual environment ===" && \
    python -m venv /opt/venv && \
    echo "=== Virtual environment created at /opt/venv ==="

ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies with detailed logging
COPY pyproject.toml README.md ./
RUN echo "=== STEP 3: Starting Python package installation ===" && \
    echo "=== Current directory: $(pwd) ===" && \
    echo "=== Files in current directory: ===" && \
    ls -la && \
    echo "=== Upgrading pip ===" && \
    pip install --upgrade pip -v --progress-bar on --timeout 300 && \
    echo "=== Installing dependencies directly (no editable install) ===" && \
    python -c "import tomllib; data = tomllib.load(open('pyproject.toml', 'rb')); deps = data['project']['dependencies']; print('Dependencies found:', deps); [print(f'Installing: {dep}') or __import__('subprocess').run(['pip', 'install', dep, '-v', '--progress-bar', 'on', '--timeout', '300'], check=True) for dep in deps]" && \
    echo "=== Dependencies installed successfully ==="

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH"

# Install runtime dependencies
RUN echo "=== Installing runtime dependencies ===" && \
    apt-get update -y && \
    echo "=== Installing curl for health checks ===" && \
    apt-get install -y curl && \
    echo "=== Cleaning up apt cache ===" && \
    rm -rf /var/lib/apt/lists/* && \
    echo "=== Runtime dependencies installed ==="

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
RUN echo "=== Virtual environment copied from builder ==="

# Create non-root user
RUN echo "=== Creating non-root user ===" && \
    groupadd -r tradingbot && \
    useradd -r -g tradingbot tradingbot && \
    echo "=== User tradingbot created ==="

# Create necessary directories
RUN echo "=== Creating application directories ===" && \
    mkdir -p /data /app && \
    chown -R tradingbot:tradingbot /data /app && \
    echo "=== Directories created and permissions set ==="

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=tradingbot:tradingbot src/ ./src/
COPY --chown=tradingbot:tradingbot examples/ ./examples/
RUN echo "=== Application code copied ==="

# Switch to non-root user
USER tradingbot

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/status/health || exit 1

# Default command
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
